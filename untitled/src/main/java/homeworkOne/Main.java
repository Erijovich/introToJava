package homeworkOne;

/*
1. –í—ã–±—Ä–æ—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 2000 –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ i
2. –ü–æ—Å—á–∏—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ n –Ω–æ–º–µ—Ä —Å—Ç–∞—Ä—à–µ–≥–æ –∑–Ω–∞—á–∞—â–µ–≥–æ –±–∏—Ç–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞
3. –ù–∞–π—Ç–∏ –≤—Å–µ –∫—Ä–∞—Ç–Ω—ã–µ n —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç i –¥–æ Short.MAX_VALUE —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ m1
4. –ù–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–∫—Ä–∞—Ç–Ω—ã–µ n —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç Short.MIN_VALUE –¥–æ i –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ m2
–ü—É–Ω–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –º–µ—Ç–æ–¥–µ main
*–ü—É–Ω–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö
int i = new Random().nextInt(k); //—ç—Ç–æ –∫–∏–¥–∞–ª–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª!)
* */

// import java.util.Arrays;
import java.util.Random;

public class Main {
    final private static int BOUND = 2000;
    public static void main(String[] args) {
        int i, n;
        int[] m1, m2;

        // 1. –í—ã–±—Ä–æ—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 2000 –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ i
        i = randomizerTwoThousand();
        print("random i = %d\n", i);

        // 2. –ü–æ—Å—á–∏—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ n –Ω–æ–º–µ—Ä —Å—Ç–∞—Ä—à–µ–≥–æ –∑–Ω–∞—á–∞—â–µ–≥–æ –±–∏—Ç–∞ –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞
        n = Integer.toBinaryString(i).length();
        print("monsenior bit = %d\n", n);

        // 3. –ù–∞–π—Ç–∏ –≤—Å–µ –∫—Ä–∞—Ç–Ω—ã–µ n —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç i –¥–æ Short.MAX_VALUE —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤
        // –°—á–∏—Ç–∞—é, —á—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –í–ö–õ–Æ–ß–ê–ï–¢ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
        m1 = arrayMaker(i, Short.MAX_VALUE, n);
        // print(Arrays.toString(m1));

        // 4. –ù–∞–π—Ç–∏ –≤—Å–µ –Ω–µ–∫—Ä–∞—Ç–Ω—ã–µ n —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç Short.MIN_VALUE –¥–æ i –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ m2
        m2 = arrayMaker(Short.MIN_VALUE, i, n, true);
        // print(Arrays.toString(m2));
    }

    private static int randomizerTwoThousand() {
        Random rnd = new Random();
        return rnd.nextInt(BOUND);
    }

    static int[] arrayMaker(int start, int end, int step) {

        int arrStart = start + Math.floorMod(-start, step); // –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (–∫—Ä–∞—Ç–Ω—ã–π —à–∞–≥—É)
        int arrEnd = end - Math.floorMod(end, step); // –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∫—Ä–∞—Ç–Ω—ã–π —à–∞–≥—É)
        int arrSize = (arrEnd - arrStart + step) / step; // —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–∏–Ω –º–∞–∫—Å –¥–µ–ª—ë–Ω–Ω–∞—è –Ω–∞ —à–∞–≥ –∏ –ø–ª—é—Å –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç (+step)
        int[] array = new int[arrSize]; // –¥–∞ —É–∂, –Ω–µ –ø–∞–π—Ç–æ–Ω —ç—Ç–æ —Å–æ–≤—Å–µ–º.. =)

        for (int i = arrStart; i <= end; i += step) { // –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤
            array[(i-arrStart)/step] = i;}
        return array; }

    static int[] arrayMaker(int start, int end, int step, boolean flag) { // —Ñ–ª–∞–≥–æ–º –æ—Ç–º–µ—á–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –∫—Ä–∞—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
                                                                          // —Ö–æ—Ç–µ–ª–æ—Å—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        int index = 0;
        int currentNum = start;
        int[] array = new int[0];

        while (currentNum <= end) { // –∏–¥—ë–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            if (Math.floorMod(currentNum,step) != 0) { // –ï—Å–ª–∏ –ù–ï –∫—Ä–∞—Ç–µ–Ω
                if (array.length <= index) array = arrayDoubleSizer(array); // –ø—Ä–æ–≤–µ—Ä—è–µ–º , —á—Ç–æ –≤–ª–µ–∑–∞–µ—Ç –≤ –º–∞—Å—Å–∏–≤
                array[index] = currentNum;
                index++;
            }
            currentNum++;
        }
        int [] finalArray = new int[index]; // –ø–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
        for (int i = 0; i < finalArray.length; i++) finalArray[i] = array[i];
        return finalArray;
    }

    static int[] arrayDoubleSizer (int[] array) { // arrayzz dynamics inc üòé
        int [] newArray =  new int[array.length * 2 + 1]; // –ê–ì–ê! —è –ø–æ–Ω—è–ª –ø–æ—á–µ–º—É —Ç—É—Ç –ø–ª—é—Å –æ–¥–∏–Ω - –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨! –µ—Å–ª–∏ –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤ –±—É–¥–µ—Ç
        for (int i = 0; i < array.length; i++) newArray[i] = array[i]; // System.arraycopy(array, 0, newArray, 0, array.length); –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–¥–µ—à–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç, –Ω–∞–¥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
        return newArray;
    }


    static int[] arrayMaker(int size, int step) { // —ç—Ç–æ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤. –°–æ–∑–¥–∞—ë–º –æ—Ç –Ω—É–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        int arrSize = size / step;
        int[] someArray = new int[arrSize];
        for (int i = step; i <= size; i += step) {
            someArray[i / step - 1] = i;} // -1 —Ç.–∫. –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –Ω—É–ª–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        return someArray;
    }

    public static void print(Object o) {System.out.println(o);}

    private static void print(String str, Object o) {System.out.printf(str, o);}
}
